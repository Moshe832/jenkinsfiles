pipeline {
    agent { label 'dc' }

    parameters {
        string(name: 'UserName', description: 'Username (e.g., john.doe)')
        string(name: 'GroupName', description: 'Group name')
        string(name: 'StartDate', description: 'Start date (yyyy-MM-dd)')
    }


    stages {
        stage('Checkout') {
            steps {
                script {
                    checkout scm
                    echo "Workspace: ${env.WORKSPACE}"
                    echo "Current Directory: ${pwd()}"
                    echo "Jenkins Home: ${env.JENKINS_HOME}"
                    echo "Jenkins URL: ${env.JENKINS_URL}"
                    echo "Jenkins Node: ${env.NODE_NAME}"
                }
            }
        }
        stage('Prepare') {
            steps {
                script {
                    println "Preparing environment..."
                    println "UserName: ${params.UserName}"
                    println "GroupName: ${params.GroupName}"
                    println "StartDate: ${params.StartDate}"
                }
            }
        }

        stage('Append to JSON') {
            steps {
                powershell '''
                $jsonPath = "$env:JSON_PATH"
                $newEntry = @{
                    UserName  = "$env:UserName"
                    GroupName = "$env:GroupName"
                    StartDate = "$env:StartDate"
                }

                if (Test-Path $jsonPath) {
                    $data = Get-Content $jsonPath | ConvertFrom-Json
                } else {
                    $data = @()
                }

                $exists = $data | Where-Object {
                    $_.UserName -eq $newEntry.UserName -and
                    $_.GroupName -eq $newEntry.GroupName
                }

                if (-not $exists) {
                    $data += New-Object PSObject -Property $newEntry
                    $data | ConvertTo-Json -Depth 5 | Set-Content -Path $jsonPath
                    Write-Output "Entry appended"
                } else {
                    Write-Output "Entry already exists â€” skipping append"
                }
                '''
            }
        }
        stage('Git Commit & Tag & Push') {
            steps {
                dir("${env.REPO_DIR}") {
                    script {
                        def tagName = "userAccessList-${new Date().format('yyyyMMdd-HHmm')}"
                        bat """
                        git config user.name "jenkins"
                        git config user.email "jenkins@example.com"
                        git add userAccessList
                        git commit -m "Update userAccessList via Jenkins"
                        git tag ${tagName}
                        git push origin main
                        git push origin ${tagName}
                        """
                    }
                }
            }
        }
        stage('Trigger AD Job') {
            steps {
                build job: 'Manage-AD-Users-And-Groups'
            }
        }
    }

    post {
        always {
            script {
                println "Cleaning up..."
                deleteDir()
            }
        }
        success {
            script {
                println "Pipeline completed successfully."
            }
        }
        failure {
            script {
                println "Pipeline failed."
            }
        }
    }

}