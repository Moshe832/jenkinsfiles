pipeline {
    agent any

    stages {
        stage('Manage AD Users and Groups') {
            steps {
                powershell '''
try {
    # Import Active Directory module
    Import-Module ActiveDirectory -ErrorAction Stop
} catch {
    Write-Error "Failed to import Active Directory module. Error: $_"
    exit 1
}
try {
    # Load JSON
    $jsonPath = "C:\\Scripts\\userAccessList.json"
    $userList = Get-Content $jsonPath | ConvertFrom-Json
} catch {
    Write-Error "Failed to load or parse JSON file at $jsonPath. Error: $_"
    exit 1
}

foreach ($entry in $userList) {
    $GroupName = $entry.GroupName
    $username = $entry.UserName
    $parts = $username -split '\\.'

    $firstName = $parts[0]
    $lastName = $parts[1]
    $parts = $username -split '\\.'
    try {
        if (Get-ADGroup -Filter {Name -eq $GroupName} -ErrorAction SilentlyContinue) {
            Write-Host "Group already exists."
        } else {
            Write-Host "Group does not exist. Creating group..."
            New-ADGroup -Name $GroupName `
                        -SamAccountName $GroupName `
                        -GroupScope Global `
                        -GroupCategory Security `
                        -Path "OU=Group,DC=lab,DC=local"
        }
    } catch {
        Write-Error "Error managing group $GroupName. Error: $_"
        continue
    }

    try {
        if (Get-ADUser -Filter {SamAccountName -eq $username} -ErrorAction SilentlyContinue) {
            Write-Host "User already exists."
        } else {
            Write-Host "User does not exist. Creating user..."
            New-ADUser -Verbose -Name "$username" `
                       -GivenName $firstName `
                       -Surname $lastName `
                       -SamAccountName $username `
                       -UserPrincipalName "$username@lab.local" `
                       -Path "OU=Users,DC=lab,DC=local" `
                       -AccountPassword (ConvertTo-SecureString "P@ssw0rd123" -AsPlainText -Force) `
                       -Enabled $true
        }
    } catch {
        Write-Error "Error managing user $username. Error: $_"
        continue
    }
}

$today = Get-Date

foreach ($entry in $userList) {
    $user = $entry.UserName
    $group = $entry.GroupName
    $startDate = [datetime]$entry.StartDate
    $endDate = $startDate.AddDays(30)

    try {
        $isMember = (Get-ADGroupMember -Identity $group -Recursive | Where-Object { $_.SamAccountName -eq $user }) -ne $null
    } catch {
        Write-Error "Error checking membership for user $user in group $group. Error: $_"
        continue
    }

    try {
        if ($today -ge $startDate -and $today -lt $endDate) {
            if (-not $isMember) {
                Write-Host "Adding $user to group $group"
                Add-ADGroupMember -Identity $group -Members $user
            } else {
                Write-Host "$user is already a member of $group – no need to add"
            }
        } else {
            if ($isMember) {
                Write-Host "Removing $user from group $group – the range has ended"
                Remove-ADGroupMember -Identity $group -Members $user -Confirm:$false
            } else {
                Write-Host "$user is not within the range and not a member – nothing to do"
            }
        }
    } catch {
        Write-Error "Error managing membership for user $user in group $group. Error: $_"
        continue
    }
}
                '''
            }
        }
    }
}
