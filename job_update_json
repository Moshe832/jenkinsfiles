pipeline {
    agent { label 'dc' }

    parameters {
        string(name: 'UserName', description: 'Username (e.g., john.doe)', defaultValue: 'john.doe')
        string(name: 'GroupName', description: 'Group name', defaultValue: 'Domain Users')
        string(name: 'StartDate', description: 'Start date (yyyy-MM-dd)', defaultValue: '2023-10-01')
    }

    environment {
        JSON_PATH = 'c:\\node\\workspace\\userAccessList'
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    checkout scm
                    echo "Workspace: ${env.WORKSPACE}"
                    echo "Current Directory: ${pwd()}"
                    echo "Jenkins Home: ${env.JENKINS_HOME}"
                    echo "Jenkins URL: ${env.JENKINS_URL}"
                    echo "Jenkins Node: ${env.NODE_NAME}"
                }
            }
        }

        stage('Prepare') {
            steps {
                script {
                    // Ensure the workspace is available
                    if (env.WORKSPACE) {
                        // Set the JSON path dynamically with double backslashes for Windows
                        //env.JSON_PATH = "${env.WORKSPACE.replaceAll('\\\\', '\\\\\\\\')}\\userAccessListS"
                        echo "JSON Path: ${env.JSON_PATH}"
                    } else {
                        error "Workspace is not available."
                    }
                    
                    println "Preparing environment..."
                    println "UserName: ${params.UserName}"
                    println "GroupName: ${params.GroupName}"
                    println "StartDate: ${params.StartDate}"
                    println "JSON Path: ${env.JSON_PATH}"
                }
            }
        }

        stage('Append to JSON') {
            steps {
                powershell '''
                if (-not $env:JSON_PATH) {
                    Write-Error "JSON_PATH is not defined."
                    exit 1
                }

                $jsonPath = "$env:JSON_PATH"
                $newEntry = @{
                    UserName  = "$env:UserName"
                    GroupName = "$env:GroupName"
                    StartDate = "$env:StartDate"
                }

                if (Test-Path $jsonPath) {
                    $data = Get-Content $jsonPath | ConvertFrom-Json
                    write-host $data
                } else {
                    $data = @()
                }

                $exists = $data | Where-Object {
                    $_.UserName -eq $newEntry.UserName -and
                    $_.GroupName -eq $newEntry.GroupName
                }

                if (-not $exists) {
                    $data += New-Object PSObject -Property $newEntry
                    $data | ConvertTo-Json -Depth 5 | Set-Content -Path $jsonPath
                    Write-Output "Entry appended"
                } else {
                    Write-Output "Entry already exists â€” skipping append"
                }
                '''
            }
        }

        stage('Trigger AD Job') {
            steps {
                build job: 'Manage-AD-Users-And-Groups'
            }
        }
    }
}
