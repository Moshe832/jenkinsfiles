pipeline {
    agent { label 'windows' }

    parameters {
        string(name: 'SamAccountName', description: 'Account name' , defaultValue: 'john')
        string(name: 'UserName', description: 'Username (e.g., john.doe)' , defaultValue: 'john.doe')
        string(name: 'GroupName', description: 'Group name' , defaultValue: 'admin-server1,admin-server2')
        string(name: 'StartDate', description: 'Start date (yyyy-MM-dd)', defaultValue: '2023-10-01')
    }

    environment {
        GIT_USER = 'moshe.cohen'
        GIT_EMAIL = 'moshe@example.com'
        GIT_CREDENTIALS_ID = 'e081ec0d-a4eb-42cc-865b-911e79062935'  // stored Jenkins credentials
        jsonFilePath = "${env.WORKSPACE}\\userAccessList.json"
        jsonFile = 'userAccessList.json'
        UpdateJsonTmp = "${env.WORKSPACE}@tmp"
        date = "${env.StartDate}"
        dateFormat = 'yyyy-MM-dd'
    }

    options {
        timeout(time: 300, unit: 'SECONDS')
    }

    stages {
        stage('Echo Workspace') {
            steps {
                script {
                    // Print workspace using Groovy inside the script block
                    echo "The workspace directory is: ${env.WORKSPACE}"
                    echo "The current directory is: ${pwd()}"
                    echo "The JSON file path is: ${env.jsonFilePath}"
                    echo "The UpdateJsonTmp file path is: ${env.UpdateJsonTmp}"
                    echo "The date is: ${env.date}"
                    echo "The date format is: ${env.dateFormat}"
                    echo "Group Names: ${env.GroupNames}"
                    echo "GIT_CREDENTIALS_ID is: ${env.GIT_CREDENTIALS_ID}"
                    echo  "jsonFile is: ${env.jsonFile}"
                }
            }
        }

        stage('Append to JSON') {
            steps {
                powershell '''
            # Get Jenkins parameters from environment
            $samAccountName = $env:SamAccountName
            $userName = $env:UserName
            $groupNameRaw = $env:GroupName
            $startDate = $env:StartDate

            # Convert comma-separated GroupName to array
            $groupName = $groupNameRaw -split '\\s*, \\s*'

            # Define file path
            $jsonFilePath = "$env:jsonFilePath"

            # Load existing JSON array or initialize new array
            if (Test-Path $jsonFilePath) {
                $existingJsonRaw = Get-Content $jsonFilePath -Raw | ConvertFrom-Json

                # Ensure existingJson is always an array
                if ($existingJsonRaw -is [System.Collections.IEnumerable]) {
                    $existingJson = @($existingJsonRaw)
                } else {
                    $existingJson = @($existingJsonRaw)
                }
            } else {
                $existingJson = @()
            }

            # Create new user object
            $newUser = [PSCustomObject]@{
                SamAccountName = $samAccountName
                UserName       = $userName
                GroupName      = $groupName
                StartDate      = $startDate
            }

            # Append to array
            $updatedJson = $existingJson + @($newUser)

            # Save updated JSON back to file
            $updatedJson | ConvertTo-Json -Depth 3 | Out-File -FilePath $jsonFilePath -Encoding UTF8

            Write-Host "Appended new user to JSON:"
            $newUser | ConvertTo-Json -Depth 3
        '''
            }
        }

        stage('Upload JSON to Repo') {
            steps {
                script {
                    echo 'Uploading JSON file to GitHub repository'
                    echo "Using GIT_CREDENTIALS_ID: ${env.GIT_CREDENTIALS_ID}"
                    echo "JSON file path: ${env.jsonFilePath}"
                    echo "JSON file name: ${env.jsonFile}"

                    withCredentials([usernamePassword(credentialsId:"${env.GIT_CREDENTIALS_ID}", usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                        powershell """
       cd '${env.WORKSPACE}'
        \$username = "moshe832"
        \$password = \$env:GIT_PASSWORD
        \$jsonFile = \$env:jsonFile

        git config user.name "\$username"
        git config user.email "Moshe832@gmail.com"
        \$url = "https://\${username}:\${password}@github.com/Moshe832/jenkinsfiles.git"
        git remote set-url origin \$url
                # ודא שאתה לא ב-detached HEAD
                git checkout main

                # שמור שינויים זמניים אם יש
                git stash

                # משוך עדכונים מה-remote
                git pull origin main

                # החזר שינויים זמניים
                git stash pop

        if (Test-Path "\$jsonFile") {
            git add "\$jsonFile"
            git commit -m "Updated \$jsonFile"
            if (\$LASTEXITCODE -ne 0) {
                Write-Host "No changes to commit"
            }

            git push origin main
        } else {
            Write-Host "File \$jsonFile does not exist."
            exit 1
        }
    """

                        stage('Trigger Job and Handle Result') {
                            steps {
                                script {
                                    try {
                                        def result = build job: 'group', wait: true
                                        echo "Job triggered successfully: ${result.getResult()}"
                                         } catch (e) {
                                        echo "Failed to trigger job: ${e.message}"
                                        currentBuild.result = 'FAILURE'
                                    } 
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
