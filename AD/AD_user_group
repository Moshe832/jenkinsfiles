pipeline {
    agent { label 'windows' }

    options {
        // Disable the default timeout for the pipeline
        timeout(time: 2, unit: 'MINUTES')
    }

    environment {
        // Define the name of the JSON file expected in the Jenkins workspace
        JSON_FILE_PATH = "$WORKSPACE\\userAccessList.json"
    }

    stages {
        stage('Check User Group Membership') {
            steps {
                // Run PowerShell commands inside this step
                powershell '''
                if (!(Test-Path "\$env:WORKSPACE\\userAccessList.json")) {
    Write-Error "‚ùå JSON file not found at \$env:WORKSPACE\\userAccessList.json"
    exit 1
}

\$Users = Get-Content "\$env:WORKSPACE\\userAccessList.json" | ConvertFrom-Json

foreach (\$User in \$Users) {
    Write-Host "------------------------------"
    Write-Host "üìå Processing User:"
    Write-Host "SamAccountName: \$($User.SamAccountName)"
    Write-Host "UserName:       \$($User.UserName)"
    Write-Host "GroupName:      \$($User.GroupName)"
    Write-Host "StartDate:      \$($User.StartDate)"
    Write-Host "------------------------------"

    \$today = Get-Date
    \$startDate = [datetime]::Parse(\$User.StartDate)
    \$daysDiff = (\$today - \$startDate).Days

    \$groupsRaw = \$User.GroupName
    if (\$groupsRaw -is [String]) {
        \$groups = \$groupsRaw -split ', '
    } elseif (\$groupsRaw -is [System.Array]) {
        \$groups = @()
        foreach (\$g in \$groupsRaw) {
            \$groups += \$g -split ', '
        }
    } else {
        Write-Warning "‚ö†Ô∏è Invalid GroupName format for user \$($User.SamAccountName)"
        continue
    }

    foreach (\$group in \$groups) {
        if ([string]::IsNullOrWhiteSpace(\$group)) { continue }
        \$group = \$group.Trim()

        if (\$daysDiff -le 30) {
            try {
                Add-ADGroupMember -Identity \$group -Members \$User.SamAccountName -ErrorAction Stop
                Write-Host "‚úÖ Added \$($User.SamAccountName) to \$group"
            } catch {
                Write-Warning "‚ùå Failed to add \$($User.SamAccountName) to \$group: \$_"
            }
        } else {
            try {
                Remove-ADGroupMember -Identity \$group -Members \$User.SamAccountName -Confirm:\$false -ErrorAction Stop
                Write-Host "‚úÖ Removed \$($User.SamAccountName) from \$group"
            } catch {
                Write-Warning "‚ùå Failed to remove \$($User.SamAccountName) from \$group: \$_"
            }
        }
    }
}

            
                                '''
            }
        }
    }
}
